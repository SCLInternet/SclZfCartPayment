<?php

namespace SclZfCartPaymentTests\Method;

use SclZfCartPayment\Method\MethodSelector;
use SclZfCartPayment\Method\MethodSelectorInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-16 at 00:29:04.
 */
class MethodSelectorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var MethodSelector
     */
    protected $object;

    /**
     * @var \Zend\Session\Container
     */
    protected $session;

    /**
     * @var \SclZfPayment\Method\MethodFetcherInterface
     */
    protected $fetcher;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->session = new \Zend\Session\Container('test');
        $this->session->paymentMethod = null;

        $this->fetcher = $this->getMock('SclZfCartPayment\Method\MethodFetcherInterface');

        $this->object = new MethodSelector($this->session, $this->fetcher);
    }

    /**
     * @covers SclZfCartPayment\Method\MethodSelector::setSelectedMethod
     */
    public function testSetSelectedMethod()
    {
        $methods = array(
            'theMethod' => 'BlahBlahBlah'
        );

        $this->fetcher->expects($this->atLeastOnce())
            ->method('listMethods')
            ->will($this->returnValue($methods));

        $this->object->setSelectedMethod('theMethod');

        $this->assertEquals('theMethod', $this->session->paymentMethod);
    }

    /**
     * @covers SclZfCartPayment\Method\MethodSelector::setSelectedMethod
     * @expectedException \SclZfCartPayment\Exception\NonExistentMethodException
     */
    public function testSetSelectedMethodWithInvalidName()
    {
        $methods = array(
            'theMethod' => 'BlahBlahBlah'
        );

        $this->fetcher->expects($this->atLeastOnce())
            ->method('listMethods')
            ->will($this->returnValue($methods));

        $this->object->setSelectedMethod('badName');
    }

    /**
     * The for when getSelectedMethods is called but the system is not
     * configured with any payment methods.
     *
     * @covers SclZfCartPayment\Method\MethodSelector::getSelectedMethod
     */
    public function testGetSelectedMethodWithNoMethods()
    {
        $methods = array(
        );

        $this->fetcher->expects($this->atLeastOnce())
            ->method('listMethods')
            ->will($this->returnValue($methods));

        $method = $this->object->getSelectedMethod();

        $this->assertEquals(
            MethodSelectorInterface::NO_METHODS_AVAILABLE,
            $method
        );
    }

    /**
     * The for when getSelectedMethods is called and the system is only
     * configured with 1 method.
     *
     * @covers SclZfCartPayment\Method\MethodSelector::getSelectedMethod
     */
    public function testGetSelectedMethodWithNoneSelected()
    {
        $methods = array(
            'method1' => 'BlahBlahBlah',
            'method2' => 'BlahBlahBlah',
        );

        $this->fetcher->expects($this->atLeastOnce())
            ->method('listMethods')
            ->will($this->returnValue($methods));

        $method = $this->object->getSelectedMethod();

        $this->assertEquals(
            MethodSelectorInterface::NO_METHOD_SELECTED,
            $method
        );
    }

    /**
     * The for when getSelectedMethods is called and the system is only
     * configured with 1 method.
     *
     * @covers SclZfCartPayment\Method\MethodSelector::getSelectedMethod
     */
    public function testGetSelectedMethodWithSingleMethod()
    {
        $methods = array(
            'singleMethod' => 'BlahBlahBlah'
        );

        $this->fetcher->expects($this->atLeastOnce())
            ->method('listMethods')
            ->will($this->returnValue($methods));

        $this->fetcher->expects($this->once())
            ->method('getMethod')
            ->with($this->equalTo('singleMethod'))
            ->will($this->returnValue('TheMethodObject'));

        $method = $this->object->getSelectedMethod();

        $this->assertEquals('TheMethodObject', $method);
    }

    /**
     * The for when getSelectedMethods is called and a valid method is selected.
     *
     * @covers SclZfCartPayment\Method\MethodSelector::getSelectedMethod
     */
    public function testGetSelectedMethod()
    {
        $methods = array(
            'method1' => 'BlahBlahBlah',
            'method2' => 'BlahBlahBlah',
        );

        $this->session->paymentMethod = 'method2';

        $this->fetcher->expects($this->atLeastOnce())
            ->method('listMethods')
            ->will($this->returnValue($methods));

        $this->fetcher->expects($this->once())
            ->method('getMethod')
            ->with($this->equalTo('method2'))
            ->will($this->returnValue('TheMethodObject'));

        $method = $this->object->getSelectedMethod();

        $this->assertEquals('TheMethodObject', $method);
    }
}
