<?php
namespace SclZfCartPaymentTests\Method;

use SclZfCartPayment\Method\MethodLoader;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-16 at 00:29:05.
 */
class MethodLoaderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var MethodLoader
     */
    protected $object;

    /**
     *
     * @var Zend\ServiceManager\ServiceLocatorInterface
     */
    protected $serviceLocator;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->serviceLocator = $this->getMock('Zend\ServiceManager\ServiceLocatorInterface');

        $this->object = new MethodLoader;

        $this->object->setServiceLocator($this->serviceLocator);
    }

    /**
     * @covers SclZfCartPayment\Method\MethodLoader::getServiceLocator
     * @covers SclZfCartPayment\Method\MethodLoader::setServiceLocator
     */
    public function testServiceLocatorAwareInterface()
    {
        $newServiceLocator = $this->getMock('Zend\ServiceManager\ServiceLocatorInterface');
        $this->object->setServiceLocator($newServiceLocator);

        $this->assertEquals($newServiceLocator, $this->object->getServiceLocator());
    }

    /**
     * @covers SclZfCartPayment\Method\MethodLoader::getMethod
     */
    public function testGetMethodWithGoodResult()
    {
        $methodName = 'TestMethod';

        $mockedMethod = $this->getMock('SclZfCartPayment\PaymentMethodInterface');

        $this->serviceLocator->expects($this->once())
            ->method('get')
            ->with($this->equalTo($methodName))
            ->will($this->returnValue($mockedMethod));

        $result = $this->object->getMethod($methodName);

        $this->assertEquals($mockedMethod, $result);
    }

    /**
     * @covers SclZfCartPayment\Method\MethodLoader::getMethod
     * @expectedException SclZfCartPayment\Exception\InvalidArgumentException
     */
    public function testGetMethodWithBadResult()
    {
        $methodName = 'TestMethod';

        $mockedMethod = 'SomethingWrong';

        $this->serviceLocator->expects($this->once())
            ->method('get')
            ->with($this->equalTo($methodName))
            ->will($this->returnValue($mockedMethod));

        $result = $this->object->getMethod($methodName);
    }
}
