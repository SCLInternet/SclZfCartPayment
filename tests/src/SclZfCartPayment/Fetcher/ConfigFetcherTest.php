<?php
namespace SclZfCartPayment\Fetcher;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-15 at 19:15:04.
 */
class ConfigFetcherTest extends \PHPUnit_Framework_TestCase
{
    protected $config = array(
        'payment_methods' => array(
            'method1' => 'method1_service_name',
            'method2' => 'method2_service_name',
        )
    );

    /**
     * @var ConfigFetcher
     */
    protected $object;

    /**
     * 
     * @var \Zend\Session\Container
     */
    protected $session;

    /**
     * 
     * @var \Zend\ServiceManager\ServiceLocatorInterface
     */
    protected $serviceLocator;
    
    protected $method1;
    protected $method2;
    
    protected function createMethodMock($name)
    {
        $method = $this->getMock('SclZfCartPayment\PaymentMethodInterface');
        $method->expects($this->any())->method('name')->will($this->returnValue($name));
        return $method;
    }

    protected function armServiceManager()
    {
        // Payment method 1
        $this->method1 = $this->createMethodMock('METHOD1_NAME');
        $this->method2 = $this->createMethodMock('METHOD2_NAME');
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->session = $this->getMockBuilder('Zend\Session\Container')->disableOriginalConstructor()->getMock();

        $this->serviceLocator = $this->getMock('Zend\ServiceManager\ServiceLocatorInterface');

        $this->object = new ConfigFetcher($this->session, $this->config);

        $this->object->setServiceLocator($this->serviceLocator);

        $this->armServiceManager();
    }

    /**
     * @covers SclZfCartPayment\Fetcher\ConfigFetcher::listMethods
     */
    public function testListMethods()
    {
        $this->serviceLocator->expects($this->at(0))
            ->method('get')
            ->with($this->equalTo('method1_service_name'))
            ->will($this->returnValue($this->method1));

        $this->serviceLocator->expects($this->at(1))
            ->method('get')
            ->with($this->equalTo('method2_service_name'))
            ->will($this->returnValue($this->method2));

        $methods = $this->object->listMethods();

        $expected = array(
            'method1' => 'METHOD1_NAME',
            'method2' => 'METHOD2_NAME',
        );

        $this->assertEquals($expected, $methods);
    }

    /**
     * @covers SclZfCartPayment\Fetcher\ConfigFetcher::getMethod
     * @todo   Implement testGetMethod().
     */
    public function testGetMethod()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    public function testSetSelectedMethod()
    {
        $this->serviceLocator->expects($this->at(0))
            ->method('get')
            ->with($this->equalTo('method1_service_name'))
            ->will($this->returnValue($this->method1));

        $this->serviceLocator->expects($this->at(1))
            ->method('get')
            ->with($this->equalTo('method2_service_name'))
            ->will($this->returnValue($this->method1));

        $this->object->setSelectedMethod('method1');
    }

    public function testGetSelectedMethod()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
