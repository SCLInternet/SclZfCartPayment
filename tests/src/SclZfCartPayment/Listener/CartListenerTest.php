<?php
namespace SclZfCartPayment\Listener;

use SclZfCartPayment\Method\MethodSelectorInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-16 at 00:29:04.
 */
class CartListenerTest extends \PHPUnit_Framework_TestCase
{
    protected $cart;

    protected $event;

    protected $selector;

    protected function setUp()
    {
        $this->selector = $this->getMock('SclZfCartPayment\Method\MethodSelectorInterface');

        $serviceLocator = $this->getMock('Zend\ServiceManager\ServiceLocatorInterface');
        $serviceLocator->expects($this->any())
            ->method('get')
            ->with($this->equalTo('SclZfCartPayment\MethodSelector'))
            ->will($this->returnValue($this->selector));

        $this->cart = $this->getMock('SclZfCart\Cart');

        $this->cart->expects($this->any())
            ->method('getServiceLocator')
            ->will($this->returnValue($serviceLocator));

        $this->event = $this->getMock('SclZfCart\CartEvent');

        $this->event->expects($this->any())
            ->method('getCart')
            ->will($this->returnValue($this->cart));
    }

    /**
     * @covers SclZfCartPayment\Listener\CartListener::checkout
     * @covers SclZfCartPayment\Listener\CartListener::getMethodSelector
     */
    public function testCheckoutWithSelectedMethod()
    {
        $method = $this->getMock('SclZfCartPayment\PaymentMethodInterface');

        $this->selector->expects($this->once())
            ->method('getSelectedMethod')
            ->will($this->returnValue($method));

        $result = CartListener::checkout($this->event);

        $this->assertNull($result);
    }

    /**
     * @covers SclZfCartPayment\Listener\CartListener::checkout
     * @covers SclZfCartPayment\Listener\CartListener::getMethodSelector
     */
    public function testCheckoutWithoutSelectedMethod()
    {
        $this->selector->expects($this->once())
            ->method('getSelectedMethod')
            ->will($this->returnValue(MethodSelectorInterface::NO_METHOD_SELECTED));

        $result = CartListener::checkout($this->event);

        $this->assertInstanceOf('SclZfCart\Utility\Route', $result);
        $this->assertEquals('payment/select-payment', $result->route);
    }

    /**
     * @covers SclZfCartPayment\Listener\CartListener::completeForm
     */
    public function testCompleteForm()
    {
        $form = $this->getMock('Zend\Form\Form');
        $form->expects($this->any())
            ->method('get')
        ->will($this->returnValue($this->getMock('Zend\Form\ElementInterface')));

        $this->event->expects($this->atLeastOnce())
            ->method('getTarget')
            ->will($this->returnValue($form));

        $method = $this->getMock('SclZfCartPayment\PaymentMethodInterface');

        $this->selector->expects($this->once())
            ->method('getSelectedMethod')
            ->will($this->returnValue($method));

        $method->expects($this->once())
            ->method('updateCompleteForm')
            ->with($this->equalTo($form), $this->equalTo($this->cart));

        CartListener::completeForm($this->event);
    }
}
